name: Build Nightingale for armv7

on:
  # 允许您在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  # 您也可以设置为在推送到特定分支时自动触发
  # push:
  #   branches:
  #     - main

# 在工作流级别定义环境变量，方便统一管理
env:
  GO_VERSION: '1.21' # 请根据Nightingale v6的要求调整，v6通常需要1.21+
  GOOS: linux
  GOARCH: arm
  GOARM: 7

jobs:
  build-for-armv7:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        # fetch-depth: 0 is not strictly needed for build, but good practice
        with:
          fetch-depth: 0

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Go Modules
        run: go mod download
        
      - name: Patch ibex dependency for 32-bit compatibility
        # 这是解决 armv7 编译错误的关键步骤
        # 我们在编译前直接修改 Go 模块缓存中的依赖源文件
        # 将 const IDINITIAL = 1 << 32 替换为 const IDINITIAL int64 = 1 << 32
        # 强制指定常量类型为 int64，以避免在32位系统上发生整型溢出
        run: |
          IBEX_FILE=$(find $(go env GOPATH)/pkg/mod/github.com/flashcatcloud/ibex@* -type f -name "redis.go")
          echo "Found ibex redis file at: $IBEX_FILE"
          sed -i 's/const IDINITIAL = 1 << 32/const IDINITIAL int64 = 1 << 32/' $IBEX_FILE
          echo "Successfully patched ibex dependency."

      - name: Build Nightingale Binary
        # 使用 ldflags -s -w 来减小最终二进制文件的大小
        # 编译目标是 cmd/n9e/main.go
        run: go build -ldflags="-s -w" -o n9e-linux-armv7 ./cmd/n9e

      - name: Prepare Artifact Package
        # 创建一个发布目录，并将二进制文件、配置文件等一同打包
        run: |
          mkdir -p release/
          mv n9e-linux-armv7 release/
          cp -r etc/ release/
          cp -r conf/ release/
          tar -zcvf n9e-linux-armv7.tar.gz release/

      - name: Upload Artifact
        # 将打包好的 tar.gz 文件作为工作流的产物上传
        uses: actions/upload-artifact@v4
        with:
          name: n9e-linux-armv7-package
          path: n9e-linux-armv7.tar.gz