name: Build Nightingale for armv7

on:
  # 允许您在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  # 您也可以设置为在推送到特定分支时自动触发
  # push:
  #   branches:
  #     - main

# 在工作流级别定义环境变量，方便统一管理
env:
  GO_VERSION: '1.21' # 请根据Nightingale v6的要求调整，v6通常需要1.21+
  GOOS: linux
  GOARCH: arm
  GOARM: 7

jobs:
  build-for-armv7:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create vendor directory
        # 这是关键的第一步。它将所有依赖项复制到项目本地的、可写的 ./vendor 目录中
        run: go mod vendor

      - name: Patch ibex dependency for 32-bit compatibility
        # 现在我们在可写的 ./vendor 目录中进行修改，不会再有权限问题
        # 路径也是固定的，更加可靠
        run: |
          IBEX_FILE="./vendor/github.com/flashcatcloud/ibex/src/storage/redis.go"
          echo "Patching ibex redis file at: $IBEX_FILE"
          sed -i 's/const IDINITIAL = 1 << 32/const IDINITIAL int64 = 1 << 32/' $IBEX_FILE
          echo "Successfully patched ibex dependency in vendor directory."

      - name: Build Nightingale Binary
        # 在构建时添加 -mod=vendor 标志，告诉Go编译器使用我们修改过的 vendor 目录
        run: go build -mod=vendor -ldflags="-s -w" -o n9e-linux-armv7 ./cmd/n9e

      - name: Prepare Artifact Package
        run: |
          mkdir -p release/
          mv n9e-linux-armv7 release/
          # 从项目根目录而不是缓存中复制配置文件
          cp etc/server.conf release/
          cp etc/config.toml release/
          # 确保配置文件和二进制文件在同一目录下
          tar -zcvf n9e-linux-armv7.tar.gz -C release .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: n9e-linux-armv7-package
          path: n9e-linux-armv7.tar.gz