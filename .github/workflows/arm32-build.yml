name: Build Nightingale (linux/armv7)

on:
  push:
    branches:
      - '**'
  workflow_dispatch: {}

jobs:
  build-armv7:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine go version from go.mod (if exists)
        id: gov
        run: |
          if [ -f go.mod ]; then
            gv=$(grep '^go ' go.mod | awk '{print $2}' || true)
            if [ -n "$gv" ]; then
              echo "go_version=$gv" >> $GITHUB_OUTPUT
            else
              echo "go_version=1.21" >> $GITHUB_OUTPUT
            fi
          else
            echo "go_version=1.21" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.gov.outputs.go_version }}

      # ===== 插入点：在这里开始补丁步骤（必须在 go 已安装之后） =====
      - name: Patch ibex for armv7 (robust)
        id: patch_ibex
        run: |
          set -euo pipefail
          TMP=/tmp/ibex
          rm -rf $TMP
          git clone --depth 1 https://github.com/flashcatcloud/ibex.git $TMP || (echo "clone failed"; exit 1)
          cd $TMP
          # 可选：切到需要的 tag 或 commit
          # git checkout v1.3.5 || true

          # 对 storage/redis.go 应用最小补丁（根据实际源码路径调整）
          if [ -f src/storage/redis.go ]; then
            perl -0777 -pe "s/const\s+IDINITIAL\s*=\s*4294967296/const IDINITIAL uint64 = 4294967296/ms" -i src/storage/redis.go || true
          fi

          # 将 patched module 复制到仓库内的 third_party/ibex
          rm -rf $GITHUB_WORKSPACE/third_party/ibex
          mkdir -p $GITHUB_WORKSPACE/third_party
          rsync -a --exclude '.git' $TMP $GITHUB_WORKSPACE/third_party/ibex/

          ROOT="$GITHUB_WORKSPACE/third_party/ibex"
          echo "Patched copy at: $ROOT"

          # 尝试寻找 go.mod（优先查找）
          MODFILE=$(find "$ROOT" -maxdepth 4 -name go.mod -print -quit || true)
          if [ -n "$MODFILE" ]; then
            MODROOT=$(dirname "$MODFILE")
            echo "Found go.mod at: $MODROOT"
            # 将模块根内容同步到 third_party/ibex 根（覆盖）
            rm -rf "$ROOT"
            mkdir -p "$ROOT"
            rsync -a --exclude '.git' "$TMP/$MODROOT"/ "$ROOT"/
          else
            # 没有 go.mod，使用 src/ 作为模块根并初始化 go.mod（module 名必须与 import path 一致）
            if [ -d "$TMP/src" ]; then
              echo "No go.mod found; using src/ as module root and initializing go.mod"
              rm -rf "$ROOT"
              mkdir -p "$ROOT"
              rsync -a --exclude '.git' "$TMP/src"/ "$ROOT"/
              # 使用 printf 而不是 heredoc，避免 YAML 解析问题
              printf '%s\n' "module github.com/flashcatcloud/ibex" "" "go 1.21" > "$ROOT/go.mod"
              # 试图 tidy（非致命）
              (cd "$ROOT" && go mod tidy) || true
            else
              echo "ERROR: cannot locate go.mod nor src/ in cloned ibex. Aborting."
              exit 1
            fi
          fi

          # 在 workspace 根运行一次 tidy（允许失败）
          cd "$GITHUB_WORKSPACE"
          go mod tidy || true

      - name: Replace module to use patched local ibex
        run: |
          cd $GITHUB_WORKSPACE
          go mod edit -replace=github.com/flashcatcloud/ibex=./third_party/ibex
          go mod tidy || true

      # ===== 补丁步骤结束 =====

      - name: Install cross compile toolchain (for CGO or linking if needed)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential gcc-arm-linux-gnueabihf

      - name: Prepare dist directory
        run: mkdir -p dist

      - name: Detect commands under ./cmd and build for linux/arm (armv7)
        run: |
          set -euo pipefail
          export GOOS=linux
          export GOARCH=arm
          export GOARM=7
          export CGO_ENABLED=0

          if [ -d "./cmd" ]; then
            for d in ./cmd/*; do
              if [ -d "$d" ]; then
                name=$(basename "$d")
                echo "Building $name ..."
                go build -v -o "dist/${name}-linux-armv7" "./cmd/${name}" || { echo "build ${name} failed"; exit 1; }
                file "dist/${name}-linux-armv7"
              fi
            done
          else
            go build -v -o "dist/n9e-linux-armv7" ./... || { echo "fallback build failed"; exit 1; }
            file "dist/n9e-linux-armv7"
          fi

      - name: List dist
        run: ls -la dist || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nightingale-armv7
          path: dist/**
