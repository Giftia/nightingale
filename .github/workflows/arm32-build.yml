name: Build Nightingale for armv7

on:
  # 允许您在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  # 您也可以设置为在推送到特定分支时自动触发
  # push:
  #   branches:
  #     - main

# 在工作流级别定义环境变量，方便统一管理
env:
  GO_VERSION: '1.21' # 夜莺 v6 通常需要 Go 1.21+
  GOOS: linux
  GOARCH: arm
  GOARM: 7

jobs:
  build-for-armv7:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create vendor directory
        run: go mod vendor

      - name: Patch ibex dependency for 32-bit compatibility
        run: |
          IBEX_FILE="./vendor/github.com/flashcatcloud/ibex/src/storage/redis.go"
          echo "Patching ibex redis file at: $IBEX_FILE"
          sed -i 's/const IDINITIAL = 1 << 32/const IDINITIAL int64 = 1 << 32/' $IBEX_FILE
          echo "Successfully patched ibex dependency in vendor directory."

      - name: Build Nightingale Binary
        # 这是修正后的关键步骤：
        # 将编译路径从 "./cmd/n9e" 改为 "."，即项目根目录。
        run: go build -mod=vendor -ldflags="-s -w" -o n9e-linux-armv7 .

      - name: Prepare Artifact Package for Release
        # 优化打包流程，使产物结构更清晰
        run: |
          # 1. 创建一个用于打包的临时目录
          mkdir -p package_root
          # 2. 将编译好的二进制文件移动到打包目录，并重命名为标准的 'n9e'
          mv n9e-linux-armv7 package_root/n9e
          # 3. 将配置文件目录完整复制进去
          cp -r etc package_root/
          cp -r conf package_root/
          # 4. 从打包目录的内部创建tar包，这样解压后不会包含顶层目录
          tar -zcvf n9e-linux-armv7.tar.gz -C package_root .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: n9e-linux-armv7-package
          path: n9e-linux-armv7.tar.gz